<?xml version="1.0" encoding="utf-8"?>
<header name="boost/compute/program.hpp">
  <namespace name="boost">
    <namespace name="compute">

      <!-- boost::compute::program -->
      <class name="program">
        <purpose>A compute program</purpose>

        <description>
          <para>
            See also: <classname>kernel</classname>
          </para>
        </description>

        <!-- program::program() -->
        <constructor>
          <description>
            <para>
              Creates a null program object.
            </para>
          </description>
        </constructor>

        <!-- program::program(cl_program, bool) -->
        <constructor specifiers="explicit">
          <parameter name="program">
            <paramtype>cl_program</paramtype>
          </parameter>
          <parameter name="retain">
            <paramtype>bool</paramtype>
            <default>true</default>
          </parameter>

          <description>
            <para>
              Creates a new program object for <code>program</code>. If
              <code>retain</code> is <code>true</code> (the default) the
              reference count for <code>program</code> will be incremented.
            </para>
          </description>
        </constructor>

        <!-- program::program(const program&) -->
        <constructor>
          <parameter name="other">
            <paramtype>const <classname>program</classname>&amp;</paramtype>
          </parameter>

          <description>
            <para>
              Creates a new program object as a copy of <code>other</code>.
            </para>
          </description>
        </constructor>

        <!-- program::program(program&&) -->
        <constructor>
          <parameter name="other">
            <paramtype><classname>program</classname> &amp;&amp;</paramtype>
          </parameter>

          <description>
            <para>
              Move-constructs a new program object from <code>other</code>.
            </para>
          </description>
        </constructor>

        <!-- operator=(const program&) -->
        <copy-assignment>
          <parameter name="other">
            <paramtype>const <classname>program</classname>&amp;</paramtype>
          </parameter>

          <description>
            <para>
              Copies the program from <code>other</code>.
            </para>
          </description>
        </copy-assignment>

        <!-- operator=(program&&) -->
        <copy-assignment>
          <parameter name="other">
            <paramtype><classname>program</classname> &amp;&amp;</paramtype>
          </parameter>

          <description>
            <para>
              Transfers the ownership of the program from <code>other</code>.
            </para>
          </description>
        </copy-assignment>

        <!-- program::~program() -->
        <destructor>
          <description>
            <para>
              Destroys the program object.
            </para>
          </description>
        </destructor>

        <method-group name="public member functions">

          <!-- program::source() -->
          <method name="source" cv="const">
            <type>std::string</type>

            <description>
              <para>
                Returns the source code for the program.
              </para>
            </description>
          </method>

          <!-- program::get_info<T>(cl_program_info) -->
          <method name="get_info" cv="const">
            <template>
              <template-type-parameter name="T"/>
            </template>

            <type>T</type>

            <parameter name="info">
              <paramtype>cl_program_info</paramtype>
            </parameter>

            <description>
              <para>
                Returns information about the program.
              </para>
            </description>
          </method>

          <!-- program::build(options) -->
          <method name="build">
            <parameter name="options">
              <paramtype>const std::string&amp;</paramtype>
              <default>std::string()</default>
            </parameter>

            <type>void</type>

            <description>
              <para>
                Builds the program with <code>options</code>.
              </para>
            </description>
          </method>

          <!-- operator program::cl_program() -->
          <method name="operator cl_program" cv="const">
            <description>
              <para>
                Converts the program object to a <code>cl_program</code>.
              </para>
            </description>
          </method>
        </method-group>

        <method-group name="public static functions">

          <!-- program::create_with_source(source, context) -->
          <method name="create_with_source" specifiers="static">
            <type><classname>program</classname></type>

            <parameter name="source">
              <paramtype>const std::string&amp;</paramtype>
            </parameter>
            <parameter name="context">
              <paramtype>const <classname>context</classname>&amp;</paramtype>
            </parameter>

            <description>
              <para>
                Creates a new program object with <code>source</code> in
                <code>context</code>.
              </para>
            </description>
          </method>

          <!-- program::create_with_source_file(file, context) -->
          <method name="create_with_source_file" specifiers="static">
            <type><classname>program</classname></type>

            <parameter name="file">
              <paramtype>const std::string&amp;</paramtype>
            </parameter>
            <parameter name="context">
              <paramtype>const <classname>context</classname>&amp;</paramtype>
            </parameter>

            <description>
              <para>
                Creates a new program object with <code>file</code> in
                <code>context</code>.
              </para>
            </description>
          </method>
        </method-group>
      </class>
    </namespace>
  </namespace>
</header>
